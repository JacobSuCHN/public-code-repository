/* 
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？   

示例 1： 输入：n = 2
输出：2
解释：有两种方法可以爬到楼顶。
1. 1 阶 + 1 阶
2. 2 阶 示例 2： 输入：n = 3
输出：3
解释：有三种方法可以爬到楼顶。
1. 1 阶 + 1 阶 + 1 阶
2. 1 阶 + 2 阶
3. 2 阶 + 1 阶
*/

/**
 * @param {number} n
 * @return {number}
 */
/* 
dp[n] = dp[n-1]+dp[n-2];（上1阶+dp[n-1]+上2阶+dp[n-2]）
dp[0] = 1 dp[1]=1
*/
var climbStairs = function (n) {
  let dp = [1, 1];
  for (let i = 2; i <= n; i++) {
    dp[i] = dp[i - 1] + dp[i - 2];
  }
  return dp[n];
};

/* 
  DP 将复杂问题拆分成小问题
  1. 如何拆 如何定义子问题
  2. 执行子问题
  3. 找到问题的边界并获取最终的结果
*/
